package backend.student.repo;

import backend.config.DBConfig;
import backend.student.model.Student;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class StudentRepoImpl implements StudentRepo{

    @Override
    public Optional<Student> createStudent(Student student) {
        String sql = "INSERT INTO students(first_name, second_name, id_number, email_address) VALUES(?,?,?,?)";
        try(Connection con = new DBConfig().getCon()){
            try(PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
                ps.setString(1, student.getFirstName());
                ps.setString(2, student.getSurname());
                ps.setString(3, student.getIdNumber());
                ps.setString(4, student.getEmailAddress());

                if(ps.executeUpdate() > 0){
                    try(ResultSet rs = ps.getGeneratedKeys()){
                        if (rs.next()){
                            student.setStudentId(rs.getLong(1));
                            return Optional.of(student);
                        }
                    }catch (SQLException couldNotRetrieveAutoGeneratedKey){
                        couldNotRetrieveAutoGeneratedKey.printStackTrace();
                    }
                }
            }catch (Exception queryException){
                System.out.println("Error while preparing the statement and handling the wildcards.");
                queryException.printStackTrace();
            }
        } catch (SQLException e) {
            System.out.println("Error in DBConfig class");
            throw new IllegalStateException(e);
        }
        return Optional.empty();
    }

    @Override
    public Optional<Student> retrieveStudent(Student student) {
        return Optional.empty();
    }

    @Override
    public Optional<Student> retrieveStudent(Long studentId) {
        String sql = "SELECT * FROM students WHERE student_id = ?";
        try(DBConfig config = new DBConfig(); PreparedStatement ps = config.getCon().prepareStatement(sql)){
            ps.setLong(1, studentId);

            try(ResultSet rs = ps.executeQuery()){
                if (rs.next()){
                    Student compiled = Student.builder()
                            .studentId(studentId)
                            .firstName(rs.getString("first_name"))
                            .surname(rs.getString("second_name"))
                            .idNumber(rs.getString("id_number"))
                            .emailAddress(rs.getString("email_address"))
                            .build();

                    return Optional.of(compiled);
                }
            }catch (SQLException resultSetError){
                System.out.println("Error while compiling student from the ResultSet");
                resultSetError.printStackTrace();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        return Optional.empty();
    }

    @Override
    public List<Student> getAllStudents() {
        String sql = "SELECT * FROM students";
        try(DBConfig config = new DBConfig(); ResultSet rs = config.getCon().createStatement().executeQuery(sql)){
            List<Student> students = new ArrayList<>();
            while(rs.next()){
                Student compiled = Student.builder()
                        .studentId(rs.getLong("student_id"))
                        .firstName(rs.getString("first_name"))
                        .surname(rs.getString("second_name"))
                        .idNumber(rs.getString("id_number"))
                        .emailAddress(rs.getString("email_address"))
                        .build();

                students.add(compiled);
            }
            return students;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public Optional<Student> updateStudent(Student student) {
        String sql = "UPDATE students SET(first_name = ? second_name = ? email_address = ? id_number = ?) WHERE student_id = ?";
        try(DBConfig config = new DBConfig(); PreparedStatement ps = config.getCon().prepareStatement(sql)){
            ps.setString(1, student.getFirstName());
            ps.setString(2, student.getSurname());
            ps.setString(3, student.getEmailAddress());
            ps.setString(4, student.getIdNumber());
            ps.setLong(5, student.getStudentId());

            if(ps.executeUpdate() > 0){
                return Optional.of(student);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return Optional.empty();
    }

    @Override
    public Optional<Student> deleteStudent(Student student) {
        String sql = "DELETE FROM students WHERE student_id = ?";
        try(DBConfig config = new DBConfig(); PreparedStatement ps = config.getCon().prepareStatement(sql)) {
            ps.setLong(1, student.getStudentId());

            if(ps.executeUpdate() > 0){
                return Optional.of(student);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return Optional.empty();
    }
}
